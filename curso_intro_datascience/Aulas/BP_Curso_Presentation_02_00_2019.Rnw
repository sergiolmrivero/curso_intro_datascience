\documentclass[11pt]{beamer}
%\usetheme{Frankfurt}
\usetheme{Singapore}
%\usetheme{CambridgeUS}
\usecolortheme{seahorse}
%\usecolortheme{whale}
\setbeamertemplate{navigation symbols}{}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{graphicx}
\usepackage{multicol}
\usepackage{changepage}
\usepackage[labelformat=empty]{caption}
\usepackage{booktabs}
%\usepackage{natbib}
\usepackage{bibentry}
\usepackage{url}
%\usepackage{enumitem}
%\bibliographystyle{alpha}
\nobibliography *
\usepackage[brazil]{babel}
%\usepackage{abnt-alf}
%\usepackage[alf]{abntcite}
\usepackage{Sweave}
\usepackage{verbatim}

\author{Sérgio Rivero}
\title{Introdução ao Tratamento e Análise de Dados em R}
\subtitle{Aula 2 - Produzindo Relatórios Usando R Markdown}

\institute{PPGE-UFPA} 
\date{\today}

\logo{
	\makebox[0.95\paperwidth]{
		\includegraphics[width=.5cm,keepaspectratio]{../logos/brasao-UFPA-preto}
		\hfill
		\includegraphics[width=1cm,keepaspectratio]{../logos/logoBP}
	}
}
\makeindex
 
\begin{document}

\SweaveOpts{concordance=TRUE, echo=TRUE, eval=TRUE}

<<setup, include=FALSE, cache=FALSE, echo=FALSE>>= 
library(knitr)
library(ggplot2)
@


\begin{frame}
\titlepage
\end{frame}


\begin{frame}
\frametitle{Sumário}
\begin{multicols}{2}
		\tableofcontents
\end{multicols}
\end{frame}





\begin{frame}
\frametitle{Objetivos da Aula}
\section{Objetivos da Aula}

	Nesta Aula queremos:
	
	\begin{enumerate}
		\item Descobrir as funcionalidades implementadas no R para a produção de relatórios dinâmicos, execução de comandos R e apresentação de resultados utilizando uma linguagem simples chamada \textbf{Markdown}; 
		\item Depois veremos como estes resultados podem ser apresentados em relatórios, utilizando exemplos práticos;
		\item Esta aula permitirá que façamos os exercícios já utilizando o \textit{Markdown}; 
	\end{enumerate}
\end{frame}


\begin{frame}
\frametitle{De onde veio o Markdown?}
\section{Markdown: Origens}
	R Markdown é um formato de arquivo que permite a produção documentos dinâmicos utilizando R. Um documento R Markdown é escrito na linguagem \textbf{Markdown} e contém partes  de código R incorporado em seções específicas do arquivo, chamadas \textit{chunks}:
	
\begin{quotation}
	\textbf{Markdown} é duas coisas: 
	\begin{enumerate}
		\item uma sintaxe de formatação de texto simples; 
		\item uma ferramenta de software, escrita em Perl, que converte a formatação de texto simples em HTML.
	\end{enumerate}
	
	A meta de design predominante da sintaxe de formatação do Markdown é torná-la o mais legível possível.
\end{quotation}	

\end{frame}



\begin{frame}
\frametitle{Markdown - Objetivos}
\begin{itemize}
	\item O uso da linguagem \textbf{Markdown}, quando se analisa dados utilizando o R, permite uma transição suave e contínua entre: 
		\begin{itemize}
			\item Análise $\rightarrow$ Relatório $\rightarrow$ Apresentação
		\end{itemize}  
	
	\item Um arquivo \textit{Rmarkdown} (Rmd) funciona como uma espécie de \textit{bloco de notas} 
	\item Pode evoluir para o formato de um relatório final 
	\item Em um conjunto de formatos (Html, PDF, docx, etc.)
	\item Isto economiza tempo e esforço. 
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{O que é o Rmarkdown?}

	\begin{itemize}
		\item 	O \textit{Rmarkdown} (RMD) é a implementação do \textbf{Markdown} em R. 
		
		\item RMD é um formato de documento introduzido inicialmente no pacote \textit{knitr}. 
		\item O Knitr, suporta um conjunto grande de linguagens, como \LaTeX, HTML, AsciiDoc, reStructuredText e Textile.
		\item A ideia por trás do RMD é embutir comandos em uma linguagem qualquer (no nosso caso, o R) dentro de um documento. 
		\item Assim, um arquivo .Rmd teria, ao mesmo tempo:
		\begin{itemize}
			\item comandos que gerariam resultados como gráficos e tabelas, 
			\item que seriam gerados num arquivo de resultados 
			\item e compilados posteriormente num documento PDF, HTML, Word, etc.
		\end{itemize} 
		
		\item o Código R está em partes específicas chamadas \textit{chunks}
	\end{itemize}

\end{frame}



\begin{frame}
\frametitle{RMD no RStudio}
	\begin{figure}
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-03}
		\caption{Um exemplo de saída de um .Rmd no Rstudio}
		\label{fig:bpcursoteccomp002019f04-03}
	\end{figure}	
\end{frame}


\begin{frame}
\frametitle{Instalando o RMD}
	\begin{itemize}
		\item Instalação do Rmarkdown $\rightarrow$ \textit{install.packages()}.
		
		\item Ou instalar a versão de desenvolvimento do \textit{GitHub}. Para isso é necessário utilizar o pacote \textit{devtools}.
		
		\item Para conseguir gerar o pdf no windows a partir de um arquivo RMD é necessário instalar o \LaTeX. O \LaTeX ~é um conjunto de pacotes que permite a edição e geração de textos formatados de alta qualidade.
	\end{itemize}

\end{frame}

\begin{frame}
\frametitle{Como o Rmd funciona?}

	O processo de geração de documentos com o RMD é feito a partir da pressão do botão \textbf{Knit} no RStudio. Para isso, você deve ter habilitado e configurado o Markdown no app.  A partir daí, o arquivo arquivo .rmd (Rmarkdown) tem seus códigos R executados e gera um código .md com os resultados da execução do R (figuras, tabelas, etc) que  é então processado pelo pandoc. Esse processamento, gera o arquivo de resultado desejado (HTML, DOC, PDF, etc)

	\begin{figure}
		\centering
		\includegraphics[width=.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-02}
		\caption{O Botão Knit no Rstudio}
		\label{fig:bpcursoteccomp002019f04-02}
	\end{figure}
\end{frame}


\begin{frame}
\frametitle{O processo de geração de documentos no RMD}
	
	\begin{figure}
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-01}
		\caption{O processo de geração de documentos no RMD}
		\label{fig:bpcursoteccomp002019f04-01}
	\end{figure}
	
\end{frame}


\begin{frame}
\frametitle{A estrutura de um arquivo .Rmd}

	Um arquivo .Rmd tem basicamente, 3 partes.

	\begin{enumerate}
		\item Um cabeçalho escrito em YAML	
		
		\item YAML é um formato de serialização de dados legíveis por humanos inspirado em linguagens como XML, C, Python, Perl, assim como o formato de correio eletrônico especificado pela RFC 2822. YAML foi proposto por Clark Evans em 2001 em conjunto com Ingy döt Net e Oren Ben-Kiki (Wikipedia). Separados por "~-~-~-~" ~no início e no final do bloco.
		
		\item Textos e comandos em Linguagem Markdown

		\item \textit{Chunks} em uma linguagem específica (no nosso casso, Comandos em R) - Separados por  "~`~`~`~" ~no início e no final do bloco.
		
	\end{enumerate}	 

\end{frame}


\begin{frame}
\frametitle{O Cabeçalho de um arquivo .Rmd}

	\begin{figure}
		\centering
		\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-04}
		\caption{Um exemplo de Cabeçalho de um arquivo .Rmd}
		\label{fig:bpcursoteccomp002019f04-04}
	\end{figure}

\end{frame}


\begin{frame}
\frametitle{Arquivos que podem ser gerados por um Rmd}
\begin{figure}
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-06}
	\label{fig:bpcursoteccomp002019f04-06}
\end{figure}

\end{frame}

\begin{frame}
\frametitle{Sub-opções no cabeçalho}
	\begin{figure}
		\centering
		\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-07}
		\caption{}
		\label{fig:bpcursoteccomp002019f04-07}
	\end{figure}

\end{frame}


\begin{frame}
\frametitle{Exemplos de subopções}
	\begin{figure}
		\centering
		\includegraphics[width=.8\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-08}
		\label{fig:bpcursoteccomp002019f04-08}
	\end{figure}

\end{frame}



\begin{frame}
\frametitle{Sintaxe de Markdown}
\section{Sintaxe de Markdown}

	O texto em um documento R Markdown é gravado com a sintaxe Markdown. Precisamente falando, é o Markdown do Pandoc. Há muitos sabores de Markdown inventados por pessoas diferentes, e o sabor do Pandoc é o mais abrangente para o nosso conhecimento. Você pode encontrar a documentação completa do Markdown do Pandoc em \url{https://pandoc.org/MANUAL.html}. É altamente recomendável que você leia esta página pelo menos uma vez para conhecer todas as possibilidades com o Markdown da Pandoc, mesmo que você não use todas elas. Esta seção é adaptada da Seção 2.1 de Xie ( 2016 ) e abrange apenas um pequeno subconjunto da sintaxe Markdown do Pandoc.

\end{frame}

\begin{frame}[fragile]
\frametitle{Formatação em linha}

	O texto embutido será em itálico se estiver cercado por sublinhados ou asteriscos, por exemplo, \verb|_text_| ou \verb|*text*|. O texto em negrito é produzido usando um par de asteriscos duplos ( \verb|**text**|). Um par de tis (\verb|~~|) transformar texto para um subscrito (por exemplo, \verb|H~3~PO~4~|torna $H_3 PO_4$ ). Um par de circunflexos (\verb|^^|) produz um sobrescrito (por exemplo, \verb|Cu^2+^| renderiza $Cu^{2+}$).

\end{frame}

\begin{frame}[fragile]
\frametitle{Formatação (Ainda)}
	Para marcar o texto como código \textit{inline}, use um par de backticks, por exemplo \verb|`code`|

	Os hiperlinks são criados usando a sintaxe \verb|[text](link)|, por exemplo \verb|[RStudio](https://www.rstudio.com)|. 

	A sintaxe das imagens é semelhante: basta adicionar um ponto de exclamação, por exemplo \verb|![alt text or image title](path/to/image)|, 

	As notas de rodapé são colocadas dentro dos colchetes após um acento circunflexo \verb|^[]|, por exemplo \verb|^[This is a footnote.]|.
\end{frame}


\begin{frame}[fragile]
\frametitle{Elementos de nível de bloco}

	Cabeçalhos de seção podem ser escritos após um número de sinais de libra, por exemplo,

	\verb|# First-level header|

	\verb|## Second-level header|
	
	\verb|### Third-level header|
	
	Se você não quiser que um determinado título seja numerado, você pode adicionar \verb|{-}| ou \verb|{.unnumbered}| após o cabeçalho, por exemplo,
	
	\verb|# Preface {-}|
\end{frame}


\begin{frame}[fragile]
\frametitle{Listas de itens no Rmd}
	Os itens da lista não ordenada começar com *, -ou +, e você pode aninhar uma lista dentro de outra lista pelo recuo da sub-lista, por exemplo,
	
	- um item\\
	- um item\\
	- um item\\
	~~~~- mais um item\\
	~~~~- mais um item\\
	~~~~- mais um item
	
	A saída é:
	\begin{itemize}
		\item um item
		\item um item
		\item um item
		\begin{itemize}
			\item mais um item
			\item mais um item
			\item mais um item
		\end{itemize}
	\end{itemize}
\end{frame}


\begin{frame}
\frametitle{Listas Ordenadas no Rmd}
	Os itens da lista ordenada começam com números (você também pode aninhar listas dentro de listas), por exemplo,
	
	1. o primeiro item\\
	2. o segundo item\\
	3. o terceiro item\\
	~~~~~~- um item não ordenado\\
	~~~~~~- um item não ordenado
	
	
	A saída não parece muito diferente com a fonte Markdown:
	
	\begin{enumerate}
		\item o primeiro item
		\item o segundo item
		\item o terceiro item
		\begin{itemize}
			\item um item não ordenado
			\item um item não ordenado
		\end{itemize}
	\end{enumerate}
	
\end{frame}


\begin{frame}[fragile]
\frametitle{Os \textit{chunks}}

	Um \textit{chunk} é uma parte de código (no nosso caso, R) incluído num arqivo \textbf{Rmarkdown}. Chunks iniciam com \verb|```{opcoes do chunk}| e terminam com \verb|```|. Na figura abaixo podemos ver um exemplo de um chunk típico gerando um gráfico em R. 
	
	\begin{figure}[htpb]
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-05}
		\caption{Um \textit{chunk}}
		\label{fig:bpcursoteccomp002019f04-05}
	\end{figure}
\end{frame}


\begin{frame}[fragile]
\frametitle{Opcões de \textit{chunks}}

	Algumas dicas importantes sobre as opções em um \textit{chunk} \footnote{O texto original pode ser encontrado em \url{https://yihui.name/knitr/options/}}:
	
	\begin{enumerate}
		\item Opções de \textit{chunk} devem ser escritas em uma linha; 
		\item não são permitidas quebras de linha dentro das opções de \textit{chunk};
		\item Evite espaços e pontos em rótulos de partes e nomes de diretórios; 
		\item Se sua saída for um documento TeX, esses caracteres podem causar problemas (em geral, é recomendável usar caracteres alfabéticos com palavras separadas por \verb|-| e evitar outros caracteres), por exemplo, \verb|setup-options| é um bom label, enquanto \verb|setup.options| e \verb|chunk 1| são ruins;
		\item Todos os valores de opções devem ser expressões R válidas, assim como escrevemos argumentos de função;
		\item para opções lógicas, deve-se usar \verb|TRUE| ou \verb|FALSE| ou \verb|T| ou \verb|F| mas, importante, "true" e "false"  não funcionam
	\end{enumerate}
\end{frame}

\begin{frame}[fragile]
	Abaixo falamos de algumas opções relevantes do cabeçalho de um chunk

	Primeiro o código pode ou não ser executado. O opção \verb|eval = FALSE| faz com que o código seja avaliado mas não executado. Sem nenhuma opção, o código é avaliado.
	
	Algumas opções que configuram os padrões de saída de um \textit{chunk} são:
	\begin{itemize}
		\item \textbf{echo:} (\verb|TRUE|) se deve incluir o código-fonte R no arquivo de saída; além de \verb|TRUE / FALSE| que liga / desliga completamente o código-fonte, também podemos usar um vetor numérico para selecionar quais expressões R ecoar em um trecho, por exemplo, \verb|echo = 2:3| significa apenas ecoar a segunda e terceira expressões, e \verb|echo = -4| significa excluir a quarta expressão;
		\item \textbf{results}: ('markup'; character) pega esses valores possíveis:
		\begin{itemize}
			\item \textbf{markup}: marque os resultados usando o gancho de saída, por ex. colocar resultados em um ambiente especial do \LaTeX;
			\item \textbf{asis}: saída como é, ou seja, grava os resultados brutos de R no documento de saída;
			\item \textbf{hold}: segura todas as saídas e as empurra para o final de um \textit{chunk}
			\item \textbf{hide}: oculta resultados.  esta opção só se aplica à saída R normal (não avisos, mensagens ou erros)				
		\end{itemize}
	\end{itemize}

\end{frame}

\begin{frame}
\frametitle{Mais opções do \textit{chunk}}
	\begin{itemize}
		\item \textbf{warning}: (default é VERDADEIRO;) preserva os avisos (produzidos por warning()) na saída como se executássemos código R em um terminal (se for  FALSO, todos os avisos serão impressos no console ao invés do documento de saída);
		\item \textbf{error}: (default é VERDADEIRO) preserva os erros (de stop()). A avaliação não será interrompida mesmo em caso de erros!! Se quisermos que R pare nos erros, precisamos definir essa opção como FALSO;
		\item \textbf{message}: (default é VERDADEIRO) preserva as mensagens emitidas por message() (semelhante ao warning).
	\end{itemize}
	
	Um detalhamento maior das opções de chunks no Rmarkdown podem ser achados em \url{https://yihui.name/knitr/options/}

\end{frame}



\begin{frame}
\frametitle{Tabelas (veremos isso mais tarde)}
\begin{figure}
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-09}
	\label{fig:bpcursoteccomp002019f04-09}
\end{figure}

\end{frame}

\begin{frame}
\frametitle{Agradecimentos}

Obrigado!

\end{frame}

\begin{frame}
\frametitle{Exercício}
\section{Exercícios}
\end{frame}



\begin{frame}[allowframebreaks]
\frametitle{Referências}
\section{Referências}

	\url{https://daringfireball.net/projects/markdown/}
	
	\url{https://rmarkdown.rstudio.com/authoring_quick_tour.html}
	
	\url{https://www.markdownguide.org/getting-started/}
	
	\url{https://ourcodingclub.github.io/2016/11/24/rmarkdown-1.html}
	
	\url{https://github.com/yihui/knitr-book}
	
	\url{https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf}
	
	\url{https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf}

\end{frame}




\end{document}
