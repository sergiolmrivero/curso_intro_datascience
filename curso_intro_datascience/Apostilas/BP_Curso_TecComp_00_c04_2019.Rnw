
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    CAPITULO
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% !Rnw root = BP_Curso_TecComp_00_2019.Rnw
\SweaveOpts{concordance=TRUE,echo=FALSE,eval=TRUE}


\chapter{Produzindo Relatórios Usando R Markdown}

	Neste capítulo discutiremos dois aspectos importantes do trabalho com dados em R. Primeiramente veremos as funcionalidades implementadas no R para a produção de relatórios dinâmicos, execução de comandos R e apresentação de resultados utilizando uma linguagem simples chamada \textbf{Markdown} \footnote{Uma definição do Markdown pode ser achada em : \url{https://tools.ietf.org/html/rfc7763}}. Depois veremos as ferramentas para apresentação de resultados gerados no R em tabelas, com a utilização dos pacotes xtable e stargazer.
		
	R Markdown é um formato de arquivo que permite a produção documentos dinâmicos utilizando R. Um documento R Markdown é escrito na linguagem \textbf{Markdown} e contém partes  de código R incorporado em seções específicas do arquivo, chamadas \textit{chunks}:
	\begin{quotation}
		\textbf{Markdown} é duas coisas: (1) uma sintaxe de formatação de texto simples; e (2) uma ferramenta de software, escrita em Perl, que converte a formatação de texto simples em HTML. Consulte a página Sintaxe para obter detalhes relacionados à sintaxe de formatação do Markdown. Você pode experimentá-lo agora mesmo, usando o Dingus online .
		
		A meta de design predominante da sintaxe de formatação do Markdown é torná-la o mais legível possível. A ideia é que um documento formatado com Markdown seja publicável como está, como texto simples, sem parecer ter sido marcado com tags ou instruções de formatação. Embora a sintaxe do Markdown tenha sido influenciada por vários filtros de texto para HTML existentes, a maior fonte de inspiração para a sintaxe do Markdown é o formato do email em texto simples (Gruber, 2004).\footnote{ \url{https://daringfireball.net/projects/markdown/}}
	\end{quotation}	
	
	O uso da linguagem \textbf{Markdown} para a produção de documentos quando se analisa dados utilizando o R, permite uma transição suave e contínua entre o processo de análise e a elaboração de um Relatório de resultados. Neste sentido um arquivo \textit{Rmarkdown} (Rmd) funciona como uma espécie de \textit{bloco de notas} que pode evoluir para o formato de um relatório final em um arquivo Html, PDF, docx, etc. Isto economiza tempo e esforço. 
	
	
	\section{O que é o Rmarkdown?}
	
	O \textit{Rmarkdown} (RMD) é a implementação do \textbf{Markdown} em R. R markdown \cite{Allaire2016} é um formato de documento  que foi introduzido inicialmente no pacote \textit{knitr} \cite{Xie2016,Xie2017}. O Knitr, na verdade suporta um conjunto grande de linguagens, como \LaTeX, HTML, AsciiDoc, reStructuredText e Textile.
	
	A ideia por trás do RMD (figura \ref{fig:bpcursoteccomp002019f04-01}) é embutir comandos em uma linguagem qualquer (no nosso caso, o R) dentro de um documento. Assim, um arquivo .Rmd teria, ao mesmo tempo, comando que gerariam resultados como gráficos e tabelas, que seriam gerados num arquivo de resultados e compilados posteriormente num documento PDF, HTML, Word, etc.  A grande vantagem do RMD é sua simplicidade.
	
	Documentos no R Markdown são salvos com um sufixo .Rmd. Este arquivo tem textos e comandos do Markdown e código R em partes específicas chamadas \textit{chunks}.
	
	
		\begin{figure}
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-03}
		\caption{Um exemplo de saída de um .Rmd no Rstudio}
		\label{fig:bpcursoteccomp002019f04-03}
	\end{figure}	
	
	Para a instalação do Rmarkdown você pode simplesmente utilizar o comando \textit{install.packages()}. Você pode instalá-lo diretamente do CRAN
		
<<eval=F,echo=T>>=
install.packages("rmarkdown")
@
	
	Ou instalar a versão de desenvolvimento do \textit{GitHub}. Para isso é necessário utilizar o pacote \textit{devtools}.
	
<<echo=T,eval=F>>=
if (!requireNamespace("devtools")){
	install.packages('devtools')
	devtools::install_github('rstudio/rmarkdown')
	}
@

	Para conseguir gerar o pdf no windows a partir de um arquivo RMD é necessário instalar o \LaTeX. O \LaTeX ~é um conjunto de pacotes que permite a edição e geração de textos formatados de alta qualidade.
	


	\section{Como o Rmd funciona?}
		
	O processo de geração de documentos com o RMD é feito a partir da pressão do botão \textbf{Knit} (figura \ref{fig:bpcursoteccomp002019f04-02}) no RStudio. Para isso, você deve ter habilitado e configurado o Markdown no app.  A partir daí, o arquivo arquivo .rmd (Rmarkdown) tem seus códigos R executados e gera um código .md com os resultados da execução do R (figuras, tabelas, etc) que  é então processado pelo pandoc. Esse processamento, gera o arquivo de resultado desejado (HTML, DOC, PDF, etc)

	\begin{figure}
		\centering
		\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-02}
		\caption{O Botão Knit no Rstudio}
		\label{fig:bpcursoteccomp002019f04-02}
	\end{figure}
	
	
	A partir do arquivo .Rmd, você pode gerar resultados que combinem, textos, resultados de operações em R, tabelas geradas pelas bibliotecas do R (regressões, outras coisas), bem como gráficos. 
		\begin{figure}
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-01}
		\caption{O processo de geração de documentos no RMD}
		\label{fig:bpcursoteccomp002019f04-01}
	\end{figure}
	

	Estes programas permitem um caminho mais suave entre a análise e a publicação dos resultados.

	
	
	\section{A estrutura de um arquivo .Rmd}
	
	Um arquivo .Rmd tem basicamente, 3 partes.

	\begin{enumerate}
		\item 	Um cabeçalho escrito em YAML\footnote{YAML é um formato de serialização de dados legíveis por humanos inspirado em linguagens como XML, C, Python, Perl, assim como o formato de correio eletrônico especificado pela RFC 2822. YAML foi proposto por Clark Evans em 2001 em conjunto com Ingy döt Net e Oren Ben-Kiki (Wikipedia) - Mais informações em: \url{https://yaml.org/}}. Separados por "\verb|---|" ~no início e no final do bloco.
		\item Textos e comandos em Linguagem Markdown
		\item \textit{Chunks} em uma linguagem específica (no nosso casso, Comandos em R) - Separados por  "\verb|```|  " ~no início e no final do bloco.
	\end{enumerate}	 
	
	O cabeçalho (figura \ref{fig:bpcursoteccomp002019f04-04}) é posto uma vez e contém definições gerais do arquivo executado.  Há vários componentes do cabeçalho, sendo que os principais são o título, o nome do autor, a data e qual será a saída do arquivo executado (HTML, PDF, MSWord, etc)
	
	\begin{figure}
		\centering
		\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-04}
		\caption{Um exemplo de Cabeçalho de um arquivo .Rmd}
		\label{fig:bpcursoteccomp002019f04-04}
	\end{figure}
	

\section{Sintaxe de Markdown}

O texto em um documento R Markdown é gravado com a sintaxe Markdown. Precisamente falando, é o Markdown do Pandoc. Há muitos sabores de Markdown inventados por pessoas diferentes, e o sabor do Pandoc é o mais abrangente para o nosso conhecimento. Você pode encontrar a documentação completa do Markdown do Pandoc em \url{https://pandoc.org/MANUAL.html}. É altamente recomendável que você leia esta página pelo menos uma vez para conhecer todas as possibilidades com o Markdown da Pandoc, mesmo que você não use todas elas. Esta seção é adaptada da Seção 2.1 de Xie ( 2016 ) e abrange apenas um pequeno subconjunto da sintaxe Markdown do Pandoc.

\subsubsection{Formatação em linha}

O texto embutido será em itálico se estiver cercado por sublinhados ou asteriscos, por exemplo, \verb|_text_| ou \verb|*text*|. O texto em negrito é produzido usando um par de asteriscos duplos ( \verb|**text**|). Um par de tis (\verb|~~|) transformar texto para um subscrito (por exemplo, \verb|H~3~PO~4~|torna $H_3 PO_4$ ). Um par de circunflexos (\verb|^^|) produz um sobrescrito (por exemplo, \verb|Cu^2+^| renderiza $Cu^{2+}$).

Para marcar o texto como código \textit{inline}, use um par de backticks, por exemplo \verb|`code`|

Os hiperlinks são criados usando a sintaxe \verb|[text](link)|, por exemplo \verb|[RStudio](https://www.rstudio.com)|. 

A sintaxe das imagens é semelhante: basta adicionar um ponto de exclamação, por exemplo \verb|![alt text or image title](path/to/image)|, 

As notas de rodapé são colocadas dentro dos colchetes após um acento circunflexo \verb|^[]|, por exemplo \verb|^[This is a footnote.]|.


\subsubsection{Elementos de nível de bloco}

Cabeçalhos de seção podem ser escritos após um número de sinais de libra, por exemplo,

\verb|# First-level header|

\verb|## Second-level header|

\verb|### Third-level header|

Se você não quiser que um determinado título seja numerado, você pode adicionar \verb|{-}| ou \verb|{.unnumbered}| após o cabeçalho, por exemplo,

\verb|# Preface {-}|

Os itens da lista não ordenada começar com *, -ou +, e você pode aninhar uma lista dentro de outra lista pelo recuo da sub-lista, por exemplo,

- um item\\
- um item\\
- um item\\
~~~~- mais um item\\
~~~~- mais um item\\
~~~~- mais um item

A saída é:
\begin{itemize}
	\item um item
	\item um item
	\item um item
	\begin{itemize}
		\item mais um item
		\item mais um item
		\item mais um item
	\end{itemize}
\end{itemize}

Os itens da lista ordenada começam com números (você também pode aninhar listas dentro de listas), por exemplo,

1. o primeiro item\\
2. o segundo item\\
3. o terceiro item\\
~~~~~~- um item não ordenado\\
~~~~~~- um item não ordenado


A saída não parece muito diferente com a fonte Markdown:

\begin{enumerate}
	\item o primeiro item
	\item o segundo item
	\item o terceiro item
	\begin{itemize}
		\item um item não ordenado
		\item um item não ordenado
	\end{itemize}
\end{enumerate}



	
\section{Os \textit{chunks}}

	Um \textit{chunk} é uma parte de código (no nosso caso, R) incluído num arqivo \textbf{Rmarkdown}. Chunks iniciam com \verb|```{opcoes do chunk}| e terminam com \verb|```|. Na figura \ref{fig:bpcursoteccomp002019f04-05} podemos ver um exemplo de um chunk típico gerando um gráfico em R. 


	\begin{figure}[htpb]
		\centering
		\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f04-05}
		\caption{Um \textit{chunk}}
		\label{fig:bpcursoteccomp002019f04-05}
	\end{figure}
	
	Algumas dicas importantes sobre as opções em um \textit{chunk} \footnote{O texto original pode ser encontrado em \url{https://yihui.name/knitr/options/}}:
	
	\begin{enumerate}
		\item Opções de \textit{chunk} devem ser escritas em uma linha; 
		\item não são permitidas quebras de linha dentro das opções de \textit{chunk};
		\item Evite espaços e pontos em rótulos de partes e nomes de diretórios; 
		\item Se sua saída for um documento TeX, esses caracteres podem causar problemas (em geral, é recomendável usar caracteres alfabéticos com palavras separadas por \verb|-| e evitar outros caracteres), por exemplo, \verb|setup-options| é um bom label, enquanto \verb|setup.options| e \verb|chunk 1| são ruins;
		\item Todos os valores de opções devem ser expressões R válidas, assim como escrevemos argumentos de função;
		\item para opções lógicas, deve-se usar \verb|TRUE| ou \verb|FALSE| ou \verb|T| ou \verb|F| mas, importante, "true" e "false"  não funcionam
	\end{enumerate}
	
	Abaixo falamos de algumas opções relevantes do cabeçalho de um chunk
	
	Primeiro o código pode ou não ser executado. O opção \verb|eval = FALSE| faz com que o código seja avaliado mas não executado. Sem nenhuma opção, o código é avaliado.
	
	Algumas opções que configuram os padrões de saída de um \textit{chunk} são:
	\begin{itemize}
		\item \textbf{echo:} (\verb|TRUE|) se deve incluir o código-fonte R no arquivo de saída; além de \verb|TRUE / FALSE| que liga / desliga completamente o código-fonte, também podemos usar um vetor numérico para selecionar quais expressões R ecoar em um trecho, por exemplo, \verb|echo = 2:3| significa apenas ecoar a segunda e terceira expressões, e \verb|echo = -4| significa excluir a quarta expressão;
		\item \textbf{results}: ('markup'; character) pega esses valores possíveis:
			\begin{itemize}
				\item \textbf{markup}: marque os resultados usando o gancho de saída, por ex. colocar resultados em um ambiente especial do \LaTeX;
				\item \textbf{asis}: saída como é, ou seja, grava os resultados brutos de R no documento de saída;
				\item \textbf{hold}: segura todas as saídas e as empurra para o final de um \textit{chunk}
				\item \textbf{hide}: oculta resultados.  esta opção só se aplica à saída R normal (não avisos, mensagens ou erros)				
			\end{itemize}
		\item \textbf{warning}: (default é VERDADEIRO;) preserva os avisos (produzidos por warning()) na saída como se executássemos código R em um terminal (se for  FALSO, todos os avisos serão impressos no console ao invés do documento de saída);
		\item \textbf{error}: (default é VERDADEIRO) preserva os erros (de stop()). A avaliação não será interrompida mesmo em caso de erros!! Se quisermos que R pare nos erros, precisamos definir essa opção como FALSO;
		\item \textbf{message}: (default é VERDADEIRO) preserva as mensagens emitidas por message() (semelhante ao warning).
	\end{itemize}

	Um detalhamento maior das opções de chunks no Rmarkdown podem ser achados em \url{https://yihui.name/knitr/options/}
	
	
	\section{Algumas referências sobre o Rmarkdown}
	
	\url{https://daringfireball.net/projects/markdown/}
	
	\url{https://rmarkdown.rstudio.com/authoring_quick_tour.html}
	
	\url{https://www.markdownguide.org/getting-started/}
	
	\url{https://ourcodingclub.github.io/2016/11/24/rmarkdown-1.html}
	
	\url{https://github.com/yihui/knitr-book}
	
	\url{https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf}
	
	\url{https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf}
	


