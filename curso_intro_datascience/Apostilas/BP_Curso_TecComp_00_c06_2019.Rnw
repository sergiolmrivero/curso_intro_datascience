
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    CAPITULO
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% !Rnw root = BP_Curso_TecComp_00_2019.Rnw
\SweaveOpts{concordance=TRUE, echo=FALSE, eval=TRUE}


\chapter{Gráficos em R}

	\section{ggplot}
	O pacote \textbf{ggplot2} é uma ferramenta de visualização gráfica bastante útil para apresentação de dados com muitos componentes. A estrutura de construção de gráficos utilizando o ggplot2 é basicamente definir os dados a serem plotados e o sistema de coordenadas. Uma boa forma de entender como funciona o \textbf{ggplot2} é por meio da metáfora de camadas. Cada detalhe do gráfico é uma camada de comando definido a partir das camadas principais(dados e coordenadas).
	
	A figura \ref{fig:f06-01} mostra cada camada do processo de construção de gráficos utilizando o ggplot2 
	
	\begin{figure}[htpb]
		\centering
		\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-01}
		\caption{Camadas do ggplot2}
		\label{fig:f06-01}
	\end{figure}

Abaixo estão as descrições de cada camada da figura \ref{fig:f06-01}

\begin{description}
	\item [Data:] Base de dados que será utilizada;
	\item [Asthetics:] Definição do conjunto de dados que a comporão o gráfico, bem como a posição de cada dado;
	\item [Scale:] Difinição dos escala dos valores do gráfico;
	\item [Objeto Geométrico:] Definição da geometria do gráfico;
	\item [Statistics:] Estatística descritiva dos dados utilizados para gerar o gráfico;
	\item [Facets:] Criação de subplots(divisão da janela de plots);
	\item [Sistema de Coordenada:] Definição do sistema de coordenadas.
\end{description}

Para os exemplos do pacote \textbf{ggplot2} utilizaremos o dataset Iris. Essa base de dados possui 5 variáveis que são:

\begin{description}
	\item [Sepal.Length:] Comprimento da sépala;
	\item [Petal.Length:] Comprimento da pétala;
	\item [Sepal.Width:] Largura da sépala;
	\item [Petal.Width:] Largura da pétala;
	\item [Species:] Espécias da plantas. 
\end{description}

<<eval=TRUE, echo=TRUE>>=
data("iris")
head(iris)
@

O primeiro gráfico apresentará a relação entre o comprimento da pétala e da sépala como pode ser visto na figura \ref{fig:f06-04}.


\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-04}
	\caption{Relação de pontos entre os comprimentos Pétala e Sépala}
	\label{fig:f06-04}
\end{figure}

\newpage

Os comandos para gerar o gráfico são:

<<eval=FALSE,echo=TRUE>>=
g1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) + 
geom_point() +
ggtitle("Relação entre tamanho da Pétala e o tamanho da Sépala") +
labs(x="Tamanho da Sépala", y="Tamanho da Pétala")
plot(g1)
@

O objeto \textbf{g1} recebe a função que trata do acesso a base aos dados \textbf{iris} e a definição da posição das variáveis. Tal função está descrita abaixo:

<<eval=FALSE,echo=TRUE>>=
g1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length))
#iris indica a base de dados e aes() indica a posição das variáveis
@

 próxima camada indica qual é a geometria do gráfico. Tal função é dada por:

<<eval=FALSE,echo=TRUE>>=
geom_point()
@

As próximas camadas apresentam apenas títulos e legendas presentes nos gráficos, além da função plot para apresentar o gráfico na região de plot do \textbf{Rstudio}

<<eval=FALSE,echo=TRUE>>=
ggtitle("Relação entre tamanho da Pétala e o tamanho da Sépala") +
labs(x="Tamanho da Sépala", y="Tamanho da Pétala")
plot(g1)
@

É possível incluir mais de uma geometria no gráfico.

\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-05}
	\caption{Relação de comprimento entre Pétala e Sépala}
	\label{fig:f06-05}
\end{figure}

Para fazer o gráfico da figura \ref{fig:f06-05} podemos utilizar os comandos abaixo:

<<eval=FALSE,echo=TRUE>>=
g2 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) + 
geom_point() +
geom_smooth() +
ggtitle("iris") +
labs(x="Sepal length", y="Petal Length")
plot(g2)
@

Podemos fazer uma separação por variáveis categóricas e apresentá-las com cores distintas. Na \textbf{aes()} adicionamos o parâmetro $color = Species$. Para o nosso exemplo, a variável categórica é \textbf{Species}.

\begin{figure}[htpb!]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-06}
	\caption{Relação de comprimento e largura das Sépalas}
	\label{fig:f06-06}
\end{figure}


O exemplo para construir a figura \ref{fig:f06-06} está exemplificado abaixo:

<<eval= FALSE, echo=TRUE>>=
g3 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
geom_point() +
ggtitle("Relação entre comprimento e largura das sépalas por espécie") +
labs(x="Comprimento da Sépala", y="Largura da Sépala", color = "Espécie")
plot(g3)
@

Podemos incluir mais uma camada e criar vários ambientes de plot dividindo o ambiente principal. Para que isso seja possível utilizaremos a função \textbf{facet.wrap()}.

\begin{figure}[htpb!]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-07}
	\caption{Relação entre comprimento e largura das sépalas por espécie}
	\label{fig:f06-07}
\end{figure}

O código para gerar o gráfico da figura \ref{fig:f06-07} está exposto abaixo:

<<eval=FALSE,echo=TRUE>>=
gf4 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + 
geom_point() +
facet_wrap(~Species) +
ggtitle("Relação entre o comprimento e a largura das sépalas") +
labs(x="Comprimento da Sépala", y="Largura da Sépala", color = "Espécie")
plot(gf4)
@

\newpage

Percebam que na figura \ref{fig:f06-07} utilizamos a mesma variável para o parâmetro \textbf{color} e para o parâmetro \textbf{facet\_wrap}. Em um novo exemplo usando a base de dados \textbf{mpg}, utilizaremos os dois parâmetros citados anteriormente, mas com variáveis distintas para cada um.

\begin{figure}[htpb!]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-08}
	\caption{Autonomia de combustível de veículos}
	\label{fig:f06-08}
\end{figure}

O código que gera a figura \ref{fig:f06-08} está escrito abaixo:



\section{Shiny}

O \textit{shiny} é um pacote R que facilita a criação de aplicativos interativos com uma interface web Web direto do R.

Para baixar o \textit{shiny} usamos nosso velho conhecido \textit{install.packages()}

<<eval=FALSE,echo=TRUE>>=

install.packages('shiny')

@


\subsection{Estrutura de um aplicativo \textit{shiny}}

Esta seção está fortemente baseada na \textit{cheat sheet} do \textit{shiny} publicada em  \url{https://shiny.rstudio.com/images/shiny-cheatsheet.pdf}

Aplicativos \textit{shiny} estão contidos em um único script chamado app.R. O script app.R reside em um diretório (por exemplo, newdir/) e o aplicativo pode ser executado com runApp("newdir").


app.R tem três componentes:

\begin{enumerate}
	\item um objeto de interface do usuário
	
	\item uma função de servidor
	
	\item uma chamada para a função shinyApp
	
\end{enumerate}

O objeto \textit{ui} da interface com o usuário controla o layout e a aparência do seu aplicativo. A função \textit{server} contém as instruções que seu computador precisa para criar seu aplicativo. Finalmente, a função \textit{shinyApp} cria objetos do \textit{shiny} a partir de um par de interface do usuário/servidor explícito.

O objeto de interface de usuário e a função servidor podem tanto estar em dois arquivos ("ui.R" e "server.R") quanto em um arquivo único. Utilizando um arquivo único permite um compartilhamento muito mais simples do código escrito em \textit{shiny}.


\begin{figure}[htpb]
	\centering
	\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-09}
	\caption{Estrutura de um arquivo de aplicação shiny}
	\label{fig:bpcursoteccomp002019f06-09}
\end{figure}

Um arquivo de aplicação em \textit{shiny}, então, conterá 3 partes (Figura \ref{fig:bpcursoteccomp002019f06-09}). Uma primeira parte é a descrição  da estrutura da página a ser publicada, bem como com os elementos da interface do usuário (ui). Este componentes terão os elementos de entrada e também indicarão onde ficariam os gráficos, tabelas e textos que resultariam nas \textbf{reações} as mudanças nos valores que estiverem conectados com estas saídas. 

\begin{figure}[htpb]
	\centering
	\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-10}
	\caption{Entrada, servidor e aplicação em detalhe}
	\label{fig:bpcursoteccomp002019f06-10}
\end{figure}


A segunda parte é a descrição das ações que ocorrem quando há uma mudança nos valores observados e quais as funções específicas serão utilizadas. Nesta segunda parte também é incluída a estratégia de renderização dos resultados (Figura \ref{fig:bpcursoteccomp002019f06-10}).




\subsection{Layouts do shiny}

A interface de usuário do shiny permite uma quantidade razoável de opções de layout, podendo também combinar conjuntos diferentes de elementos em entradas únicas. Abaixo (Figura \ref{fig:bpcursoteccomp002019f06-13}) vemos o exemplo de um painel com um campo de entrada tipo data e um botão para incluir o valor da variável.
 
\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-13}
	\caption{Um painel composto e as diversas funções de painéis compostos}
	\label{fig:bpcursoteccomp002019f06-13}
\end{figure}

Na definição da interface, ao utilizarmos a função \textit{fluidPage()} (Figura \ref{fig:bpcursoteccomp002019f06-14} podemos montar um conjunto grande de layouts com uma flexibilidade que permite diversos padrões de distribuição das informações na sua home page gerada pelo \textit{shiny}. 

\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-14}
	\caption{Exemplo da função fluidRow()}
	\label{fig:bpcursoteccomp002019f06-14}
\end{figure}

A figura \ref{fig:bpcursoteccomp002019f06-14} mostra um exemplo da função \textit{fluidRow()} com duas linhas e duas colunas de tamanhos diferentes dentro do layout de uma página.

\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-15}
	\caption{Exemplo da função flowLayout()}
	\label{fig:bpcursoteccomp002019f06-15}
\end{figure}

A função \textit{flowLayout()} (Figura \ref{fig:bpcursoteccomp002019f06-14}) permite uma distribuição automática dos objetos dentro da página.

\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-16}
	\caption{Exemplo da função sidebarLayout()}
	\label{fig:bpcursoteccomp002019f06-16}
\end{figure}

A função \textit{sidebarLayout()} (Figura \ref{fig:bpcursoteccomp002019f06-16}) é extremamente útil para termos painéis onde opções em um painel alteram a saída em um painel principal. Muitas apresentações e aplicações em páginas que mostram dados têm esse layout. 



\begin{figure}
	\centering
	\includegraphics[width=0.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-19}
	\caption{Painéis no \textit{shiny}}
	\label{fig:bpcursoteccomp002019f06-19}
\end{figure}


Um outro conjunto funções bastante útil que aumenta a densidade de informações apresentadas na página são as que colocam painéis (As funções \textit{tabesetPanel(), navlistPanel()} combinadas com a função \textit{tabPanel()}. Estas funções permitem a apresentação de resultados selecionados a partir de um conjunto de painéis com diferentes conteúdos para cada painel (Figura \ref{fig:bpcursoteccomp002019f06-19})


\begin{figure}
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-12}
	\caption{Alguns Tipos de Entradas}
	\label{fig:bpcursoteccomp002019f06-12}
\end{figure}

Os objetos que permitem diversos tipos de entradas no \textit{shiny} são incluidos na seção ui. Na figura \ref{fig:bpcursoteccomp002019f06-12} vemos alguns dos tipos de objetos que podem ser utilizados. É possível fazer uma entrada de um valor numérico com \textit{numericInput()}, de um valor que permite escolha entre alternativas com (\textit{radioButtons()} e \textit{selectInput()}  entre diversas outras possibilidades.



\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.7\linewidth]{../figs/BP_Curso_TecComp_00_2019_f06-20}
	\caption{Funções de Renderização e Saída}
	\label{fig:bpcursoteccomp002019f06-20}
\end{figure}


Finalmente, o \textit{shiny} combina funções de renderização e saída para produzir as suas páginas. As funções de renderização funcionam combinadas com as funções de saída (Figura \ref{fig:bpcursoteccomp002019f06-20}) e são também combinadas ou disparadas por eventos que ocorrem na interface de usuário. Este padrão é uma das características do modelo de programação das páginas geradas pelo \textit{shiny} chamado de \textit{programação reativa}. Mais informações sobre o modelo de programação reativa, podem ser encontradas em \url{https://shiny.rstudio.com/articles/reactivity-overview.html}


\subsection{Alguns links úteis}


	\url{https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/}
	
	\url{https://shiny.rstudio.com/}
	
	\url{http://material.curso-r.com/shiny/}
	
	\url{https://www.rstudio.com/products/shiny/shiny-user-showcase/}
	
	\url{https://www.showmeshiny.com/category/topics/finance/}
	
	\url{https://shiny.rstudio.com/images/shiny-cheatsheet.pdf}
	
	\url{https://www.rstudio.com/wp-content/uploads/2015/02/shiny-cheatsheet.pdf}
	
	
	
	


