
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%    CAPITULO
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% !Rnw root = BP_Curso_TecComp_00_2019.Rnw
\SweaveOpts{concordance=TRUE, echo=FALSE, eval=TRUE}

\chapter{Aula 3 - Limpando e organizando seus dados}

	\section{O que é uma boa base de dados e que tipos de bases existem?}
	Boas bases de dados para trabalhar, sobretudo com tidy, são bases que possuem variáveis nas colunas e observações nas linhas. 
	Podemos identificar tal estrutura na figura \ref{fig:f03-01}  abaixo:
	
\begin{figure}[htpb!]
	\centering
	\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-01}
	\caption{Organização ideal para base de dados}
	\label{fig:f03-01}
\end{figure}

Há três tipos bases de dados principais que comportam a estrutura de variáveis nas colunas e observações nas linhas que são:

\begin{itemize}
	\item Séries Temporais
	\item Cortes Transversais
	\item Dados em Painel
\end{itemize}

\subsection{Série Temporal}

Séries temporais(ou longitudinais) são identificadas como observações ordenadas ao longo do "tempo". Exemplos:
\begin{itemize}
\item PIB distribuído anualmente;
\item Arrecadação mensal de um ou mais Estados;
\item Taxa de câmbio diária.
\end{itemize}

Um bom exemplo de fonte de bases de dados de series temporais é o SGS - Banco Central. Segue o link abaixo:

\url{https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries}


\begin{figure}[htpb]
	\centering
	\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-02}
	\caption{Exemplo de série temporal}
	\label{fig:f03-02}
\end{figure}

\subsection{Corte Transversal}

Dados transversais(ou cross-section) são identificados quando não há importância de ordenação das observações, além de representar dados em um único ponto do "tempo". Exemplos:

\begin{itemize}
\item Arrecadação de ICSM para todos Estados do Brasil para o ano de 2018;
\item Dados demográficos para todos os municípios do Pará para o ano de 2010.
\end{itemize}

Um bom exemplo de fonte de bases de dados de cortes transversais é o Sidra - IBGE. Segue o link abaixo:

\url{https://sidra.ibge.gov.br/home}


\begin{figure}[htpb!]
	\centering
	\includegraphics[width=\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-03}
	\caption{Base de dados de Série Temporal}
	\label{fig:bpcursoteccomp002019f03-03}
\end{figure}


<<eval=T,echo=T>>=
library(dplyr)
@

  Nesta seção utilizaremos a base de dado "starwars", que é uma base nativa do pacote dplyr. Para que possamos ter acesso a base, devemos utilizar a função a seguir:
  
<<eval=T,echo=T>>=
data("starwars")
@
  
  \subsection{Funções de Remodelagem}
A primeira função apresentada é a função \textbf{arrange}, que consiste em ordenar uma coluna(variável) de forma crescente ou decrescente. As função é escrita da seguinte forma:

<<eval=T,echo=TRUE>>=
starwars11 <- arrange(starwars, mass) #Para ordenamento crescente
starwars12 <- arrange(starwars, desc(height)) #Para ordenamento decrescente
@
  
Estão apresentadas a seguir as funções utilizadas para renomear rótulos(nomes) de colunas(variáveis).

<<eval=T,echo=TRUE>>=
starwars21 <- rename(starwars, nome = name)
starwars22 <- rename(starwars, altura = height)
starwars23 <- rename(starwars, massa = mass)
@

\subsection{Funções de Filtragem}
A função \textbf{filter} extrai linhas de uma base de dados a partir de um critério lógico. Essa função é bastante útil quando é preciso extrair um conjunto de dados que apresentam determinadas características. Por exemplo quando é preciso criar um novo objeto sem os outliers. A função está descrita abaixo:

<<eval=T,echo=T>>=
starwars31 <- filter(starwars, mass < 70)
@

A função \textbf{distinct} remove todas as linhas que se encontram duplicadas na base de dados, permanecendo apenas uma de cada linha duplicada. Utilizamos a função da seguinte forma:

Observação: Para que possamos usar a função \textbf{distinct}, criamos o objeto \emph{starwars32} com as linhas 31 até a 60 duplicadas.

<<eval=T,echo=T>>=
starwars32 <- rbind(starwars, starwars[31:60,])
starwars32 <- distinct(starwars32)
@

A função \textbf{sample\_frac} seleciona aleatoriamente o número de linhas correspondentes a fração determinada na função. O exemplo abaixo seleciona aleatoriamente 40\% das linhas da base de dados.

<<eval=T,echo=T>>=
starwars41 <- sample_frac(starwars, 0.4, replace = TRUE)
@

A função \textbf{sample\_n} seleciona um número $N$ de linhas. Onde $N$ é o número de linhas que devem ser extraídas.
<<eval=F,echo=T>>=
starwars42 <- sample_n(starwars, 25, replace = TRUE)
@

A função \textbf{slice} extrai linhas de acordo com as posições das linhas. Para o exemplo abaixo, criamos um novo objeto com as linhas 10 até a linha 50.

<<eval=F,echo=F>>=
starwars51 <- slice(starwars, 10:50)
@

A função \textbf{select} seleciona colunas a partir dos rótulos especificados na função.

<<eval=F,echo=T>>=
starwars61 <- select(starwars, name, height, mass)
starwars62 <- select(starwars, name, gender, species)
@

Para combinação de duas ou mais bases de dados temos as funções de \textbf{"join"}. A primeira é a função \textbf{left\_join} que insere uma base de dados a outra pela esquerda. 

<<eval=F,echo=T>>=
starwars71 <- left_join(starwars61, starwars62, by = "name")
@

A função \textbf{right\_join} insere uma base a outra pela direita.

<<eval=F,echo=T>>=
starwars72 <- right_join(starwars61, starwars62, by = "name")
@

A função \textbf{full\_join} insere uma base a outra a partir de uma chave comum nas duas bases.

<<eval=F,echo=T>>=
starwars73 <- full_join(starwars61, starwars62, by = "name")
@

Além de todas essas funções apresentadas anteriormente, o dplyr permite concatenar funções por meio de um mecanismo chamado \textbf{pipe}. Para utilizar o pipe é preciso colocar tais símbolos: 

\begin{itemize}
\item \%>\%
\end{itemize}

Abaixo temos um exemplo da utilização do pipe. O exemplo consiste em calcular média e desvio padrão a partir de um agrupamento por espécie da base de dados starwars.

<<eval=F,echo=T>>=
starwars81 <- starwars %>%
  group_by(species) %>%
  summarise(desvpad = sd(birth_year, na.rm = TRUE),
            avg = mean(birth_year, na.rm = TRUE))
@

\section{tidyr}

\textbf{Tidyr} é um pacote de tratamento de dados que fornece funções baseadas na organização de observações nas linhas e variáveis nas colunas, além de possuir boa relação com outros pacotes, como o \textbf{dplyr} para tratamento de dados e \textbf{ggplot} para apresentação de resultados.
	
A fonte para parte das figuras desta seção está em \url{https://github.com/rstudio/cheatsheets/blob/master/data-import.pdf}
	
	
Para utilizar o pacote precisamos efetuar a instalação do pacote e depois executar o mesmo.

<<eval=F,echo=T>>=
install.packages("tidyr")
@


<<eval=T,echo=T>>=
library(tidyr)
@
Para os exemplos desta seção utilizaremos as bases de dados \textbf{population} e \textbf{table2} do próprio tidyr. Para utilizar as duas bases precisamos efetuar dois comandos, que são:

<<eval=T,echo=T>>=
data("population")
data("table2")
@

O \textbf{tidyr} possui quatro funções de remodelagem que são:

	
\subsection{Gather}	
A função \textbf{gather} é oposta a função \textbf{spread}, visto que \textbf{gather} transforma os rótulos das variáveis(nome das colunas) em observações(linhas). Para tal exemplo utilizaremos a base de dados \textbf(table2).

Primeiro transformaremos o fator(cases, count) em colunas.

<<eval=T,echo=T>>=
View(table2)
population12 <- table2 %>% spread(type, count) 
View(population12)
@

	
\begin{figure}[htpb]
	\centering
	\includegraphics[width=.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-04.png}
	\caption{Exemplo da função gather: gather(table4a, `1999`, `2000`,key = "year", value = "cases")}
	\label{fig:bpcursoteccomp002019f03-04}
\end{figure}

Depois retornaremos com o fator(cases, count) para as linhas, retornando ao painel de dados anteriormente.

<<eval=T,echo=T>>=
population13 <- population12 %>% gather(type, count, cases:population)
View(population13)
@
	

\subsection{Spread}
A função \textbf{spread} transforma linhas em colunas. É bastante útil quando é preciso transformar dados categóricos em variáveis.

No exemplo abaixo transformamos um painel de dados em uma série temporal, sendo as variáveis os países presentes na base de dados \textbf{population}.

<<eval=T,echo=T>>=
View(population)
population11 <- population %>% spread(country, population)
View(population11)
@


	
\begin{figure}[htpb]
	\centering
	\includegraphics[width=.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-05.png}
	\caption{Exemplo da função spread: spread(table2, type, count)}
	\label{fig:bpcursoteccomp002019f03-05}
\end{figure}


\newpage
\subsection{Unite}

A função \textbf{unite} agrega o conteúdo de todas as linhas de duas colunas distintas em uma única coluna. Para o exemplo dessa função utilizaremos o dataset \textbf{table1} para unir o conteúdo de duas colunas.

Primeiramente acessamos o dataset \textbf{table1}:

<<eval=T,echo=T>>=
data("table1")
head(table1)
@

Após ter acesso ao dataset, podemos executar a função \textbf{unite} para juntar os conteúdos \textbf{country} e \texttt{year} em uma única coluna. Fazemos a ação da seguinte forma:

<<eval=T,echo=T>>=
table2 <- unite(table1, "country_year", c("country","year"))
head(table2)
@

\begin{figure}[htpb]
	\centering
	\includegraphics[width=.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-06.png}
	\caption{Exemplo da função unite: unite(table5, century, year,
		col = "year", sep = ``""``)}
	\label{fig:bpcursoteccomp002019f03-06}
\end{figure}	
	
	
\subsection{Separate}

A função \textbf{separate} desagrega o conteúdo de uma coluna em duas novas colunas. Para o exemplo dessa função utilizaremos o dataframe \textbf{table2} criado no exemplo anterior.

A função de seperação é a seguinte:

<<eval=T,echo=T>>=
table3 <- separate(table2, country_year, c("country", "year"), sep = "_")
head(table3)
@

Como resultado da separação é preciso que obtenhamos um dataframe \textbf{table3} exatamente igual ao dataframe \textbf{table1}. Para checarmos o resultado está conforme o esperado, podemos executar o respectivo comando:

<<eval=T,echo=T>>=
table3 == table1
@

\begin{figure}[htpb]
	\centering
	\includegraphics[width=.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-07.png}
	\caption{Exemplo da função separate: separate(table3, rate,
		into = c("cases", "pop"))}
	\label{fig:bpcursoteccomp002019f03-07}
\end{figure}






\begin{figure}[htpb]
	\centering
	\includegraphics[width=.6\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-08.png}
	\caption{Exemplo da função separate\_rows: separate\_rows(table3, rate)}
	\label{fig:bpcursoteccomp002019f03-08}
\end{figure}




\subsection{Lidando com valores omissos}


\begin{figure}[htpb]
	\centering
	\includegraphics[width=.5\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-09.png}
	\caption{Exemplo da função drop\_na: drop\_na(x, x2)}
	\label{fig:bpcursoteccomp002019f03-09}
\end{figure}



\begin{figure}[htpb]
	\centering
	\includegraphics[width=.5\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-10.png}
	\caption{Exemplo da função fill: fill(x,x2)}
	\label{fig:bpcursoteccomp002019f03-10}
\end{figure}




\begin{figure}[htpb]
	\centering
	\includegraphics[width=.5\linewidth]{../figs/BP_Curso_TecComp_00_2019_f03-11.png}
	\caption{Exemplo da função replace\_na: replace\_na(x, list(x2 = 2))}
	\label{fig:bpcursoteccomp002019f03-11}
\end{figure}

